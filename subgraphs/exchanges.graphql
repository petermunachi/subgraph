# Synthentix is an aggregation entity
# Total synth exchanges in aggregate
type Total @entity {
  " 'mainnet' always "
  id: ID!

  " number of trades completed over period "
  trades: BigInt!

  " number of unique traders seen over period "
  exchangers: BigInt!

  " synth value exchanged in USD units "
  exchangeUSDTally: BigDecimal!

  " synth value received in fees in USD units "
  totalFeesGeneratedInUSD: BigDecimal!
}

type PostArchernarTotal @entity {
  " 'mainnet' always "
  id: ID!

  " number of trades completed over period "
  trades: BigInt!

  " number of unique traders seen over period "
  exchangers: BigInt!

  " synth value exchanged in USD units "
  exchangeUSDTally: BigDecimal!

  " synth value received in fees in USD units "
  totalFeesGeneratedInUSD: BigDecimal!
}

# Total synth exchanges per day
type DailyTotal @entity {
  " numeric, incrementing timestamp "
  id: ID!

  " timestamp of the beginning of the day this represents "
  timestamp: BigInt!

  " number of trades completed over period "
  trades: BigInt!

  " number of unique traders seen over period "
  exchangers: BigInt!

  " synth value exchanged in USD units "
  exchangeUSDTally: BigDecimal!

  " synth value received in fees in USD units "
  totalFeesGeneratedInUSD: BigDecimal!
}

# Total synth exchanges per 15 minute period
type FifteenMinuteTotal @entity {
  " numeric, incrementing time period "
  id: ID!

  " timestamp of the beginning of the period this represents "
  timestamp: BigInt!

  " number of trades completed over period "
  trades: BigInt!

  " number of unique traders seen over period "
  exchangers: BigInt!

  " synth value exchanged in USD units "
  exchangeUSDTally: BigDecimal!

  " synth value received in fees in USD units "
  totalFeesGeneratedInUSD: BigDecimal!
}

" Tracks this event from the Synthetix.sol contract "
type SynthExchange @entity {
  id: ID!
  account: Bytes! # address
  from: Bytes! # address
  fromCurrencyKey: Bytes! # bytes4
  fromSynth: String! # human readable from synth name
  fromAmount: BigDecimal! # uint256
  fromAmountInUSD: BigDecimal! # from Amount including fees
  toCurrencyKey: Bytes! # bytes4
  toSynth: String! # human readable to synth name
  toAmount: BigDecimal! # uint256
  toAmountInUSD: BigDecimal! # to Amount without fees
  feesInUSD: BigDecimal!
  toAddress: Bytes! # address
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

" Tracks this event from the Synthetix.sol contract "
type ExchangeReclaim @entity {
  id: ID!
  account: Bytes! # address
  currencyKey: Bytes! # bytes4
  amount: BigDecimal! # uint256
  amountInUSD: BigDecimal! # uint256
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

" Tracks this event from the Synthetix.sol contract "
type ExchangeRebate @entity {
  id: ID!
  account: Bytes! # address
  currencyKey: Bytes! # bytes4
  amount: BigDecimal! # uint256
  amountInUSD: BigDecimal! # uint256
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

" An individual Exchanger "
type Exchanger @entity {
  id: ID!
}

" An individual Exchanger Post Archernar "
type PostArchernarExchanger @entity {
  id: ID!
}

" An individual Exchanger seen during a day "
type DailyExchanger @entity {
  id: ID!
}

" An individual Exchanger seen during a fifteen minute period "
type FifteenMinuteExchanger @entity {
  id: ID!
}

type ExchangeFee @entity {
  " Name of the synth. E.g. sUSD "
  id: ID!

  " Current Fee as a ratio of the trade amount "
  fee: BigDecimal!
}

" Latest Rates over time "
type RateUpdate @entity {
  " <transaction hash>-<currency key> "
  id: ID!

  " currencyKey for which this this rate update applies "
  currencyKey: Bytes!

  " currencyKey expressed as a string "
  synth: String!

  " the rate recorded at this timestamp "
  rate: BigDecimal!

  " the block which this rate was recorded "
  block: BigInt!

  " timestamp of the block in which the rate was recorded "
  timestamp: BigInt!
}

" The average price of SNX over a 15 minute period "
type FifteenMinuteSNXPrice @entity {
  " unix timestamp at beginning of 15 minute period "
  id: ID!

  " number of samples averaged in the period "
  count: BigInt!

  " calculated average price of all the samples "
  averagePrice: BigDecimal!
}

" The average price of SNX over a day "
type DailySNXPrice @entity {
  " unix timestamp at beginning of 15 minute period "
  id: ID!

  " number of samples averaged in the period "
  count: BigInt!

  " calculated average price of all the samples "
  averagePrice: BigDecimal!
}

type DailyCandle @entity {
  " DailyEpoch-Asset. E.g. 18361-sETH "
  id: ID!
  synth: String!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
  timestamp: BigInt!
}

type InversePricingInfo @entity {
  " Name of inverse synth. E.g. iETH "
  id: ID!

  " whether or not this inverse synth has been frozen "
  frozen: Boolean!

  " configured upper limit "
  upperLimit: BigDecimal!

  " configured lower limit "
  lowerLimit: BigDecimal!

  " matching price point with long synth "
  entryPoint: BigDecimal!
}

type LatestRate @entity {
  " Name of synth. E.g. sUSD "
  id: ID!

  " Synth USD rate "
  rate: BigDecimal!

  " Address of the aggregator which produces current result "
  aggregator: Bytes!
}
